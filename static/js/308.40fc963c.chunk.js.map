{"version":3,"file":"static/js/308.40fc963c.chunk.js","mappings":"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","sources":["components/Cast/Cast.js","components/AdditionalInfo/AdditionalInfo.js","components/MovieDetails/MovieDetails.js","components/Reviews/Reviews.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from '../../api/themoviedb';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCredits = async () => {\n      const response = await getMovieCredits(movieId);\n      setCast(response.data.cast);\n    };\n    fetchCredits();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Cast</h2>\n      <ul>\n        {cast.map(actor => (\n          <li key={actor.id}>\n            <img src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`} alt={actor.name} />\n            <div>\n              <h3>{actor.name}</h3>\n              <p>as {actor.character}</p>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits, getMovieReviews } from '../../api/themoviedb';\nimport Cast from '../Cast/Cast';\nimport Review from '../Reviews/Reviews';\n\nconst AdditionalInfo = () => {\n  const { movieId } = useParams();\n  const [credits, setCredits] = useState([]);\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchCreditsAndReviews = async () => {\n      try {\n        const creditsResponse = await getMovieCredits(movieId);\n        setCredits(creditsResponse.data.cast);\n        const reviewsResponse = await getMovieReviews(movieId);\n        setReviews(reviewsResponse.data.results);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchCreditsAndReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      <Cast cast={credits} />\n      <Review reviews={reviews} />\n    </div>\n  );\n};\n\nexport default AdditionalInfo;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieDetails, getMovieCredits, getMovieReviews } from '../../api/themoviedb';\nimport Cast from '../Cast/Cast';\nimport Reviews from '../Reviews/Reviews';\nimport AdditionalInfo from '../AdditionalInfo/AdditionalInfo';\n\nfunction MovieDetails() {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState({});\n  const [credits, setCredits] = useState([]);\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const { data: movieData } = await getMovieDetails(movieId);\n        const { data: creditsData } = await getMovieCredits(movieId);\n        const { data: reviewsData } = await getMovieReviews(movieId);\n        setMovie(movieData);\n        setCredits(creditsData.cast);\n        setReviews(reviewsData.results);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchMovieDetails();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>{movie.title}</h2>\n      <div>\n        <img src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt={movie.title} />\n        <div>\n          <p>User Score: {movie.vote_average * 10}%</p>\n          <p>Overview: {movie.overview}</p>\n          <p>Genres: {movie.genres?.map(genre => genre.name).join(', ')}</p>\n        </div>\n      </div>\n      <AdditionalInfo cast={<Cast cast={credits} />} reviews={<Reviews reviews={reviews} />} />\n    </div>\n  );\n}\n\nexport default MovieDetails;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from '../../api/themoviedb';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const response = await getMovieReviews(movieId);\n        setReviews(response.data.results);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(review => (\n            <li key={review.id}>\n              <p>{review.author}</p>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","cast","setCast","movieId","useParams","useEffect","fetchCredits","getMovieCredits","response","data","map","actor","src","profile_path","alt","name","character","id","credits","setCredits","reviews","setReviews","fetchCreditsAndReviews","creditsResponse","getMovieReviews","reviewsResponse","results","console","log","Cast","movie","setMovie","fetchMovieDetails","getMovieDetails","movieData","creditsData","reviewsData","error","title","poster_path","vote_average","overview","genres","genre","join","Reviews","fetchReviews","length","review","author","content","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}